syntax=function (stx$4) {
    var name_stx$5 = stx$4[0];
    var here$8 = getTemplate(7);
    var takeLineContext$9 = patternModule.takeLineContext;
    var takeLine$10 = patternModule.takeLine;
    var mod$11 = makeIdent('patternModule', here$8);
    if (!(stx$4[1] && stx$4[1].token && stx$4[1].token.inner)) {
        throwSyntaxError('macro', 'Macro `syntax` could not be matched', stx$4[1]);
    }
    var res$12 = [
            mod$11,
            makePunc('.', here$8),
            makeIdent('transcribe', here$8),
            makeDelim('()', [
                makeIdent('#quoteSyntax', here$8),
                stx$4[1].expose(),
                makePunc(',', here$8),
                makeIdent('name_stx', name_stx$5),
                makePunc(',', here$8),
                makeIdent('match', name_stx$5),
                makePunc('.', here$8),
                makeIdent('patternEnv', name_stx$5)
            ], here$8)
        ];
    return {
        result: res$12,
        rest: stx$4.slice(2)
    };
}#=function (stx$14) {
    return {
        result: [
            makeIdent('syntax', stx$14[0]),
            stx$14[1]
        ],
        rest: stx$14.slice(2)
    };
}syntaxCase=function (stx$16, context$17) {
    var name_stx$18 = stx$16[0];
    var here$21 = getTemplate(20);
    if (!(stx$16[1] && stx$16[1].token && stx$16[1].token.inner) || !(stx$16[2] && stx$16[2].token && stx$16[2].token.inner)) {
        throwSyntaxError('macro', 'Macro `syntaxCase` could not be matched', stx$16[1]);
    }
    var arg_stx$22 = stx$16[1].expose().token.inner;
    var cases_stx$23 = stx$16[2].expose().token.inner;
    var Token$24 = parser.Token;
    var assert$25 = parser.assert;
    var loadPattern$26 = patternModule.loadPattern;
    var takeLine$27 = patternModule.takeLine;
    var matchPatterns$28 = matchPatterns$28;
    function makeFunc$29(params$45, body$46) {
        return [
            makeKeyword('function', here$21),
            makeDelim('()', params$45, here$21),
            makeDelim('{}', body$46, here$21)
        ];
    }
    function makeVarDef$30(id$47, expr$48) {
        return [
            makeKeyword('var', here$21),
            makeIdent(id$47, name_stx$18),
            makePunc('=', here$21)
        ].concat(expr$48, makePunc(';', here$21));
    }
    function makeAssign$31(id$49, expr$50) {
        return [
            makeIdent(id$49, name_stx$18),
            makePunc('=', here$21)
        ].concat(expr$50, makePunc(';', here$21));
    }
    function cloneSyntax$32(stx$51) {
        var clone$52 = _.extend({}, stx$51, { token: _.clone(stx$51.token) });
        if (clone$52.token.inner) {
            clone$52.token.inner = clone$52.token.inner.map(cloneSyntax$32);
        }
        return clone$52;
    }
    if (cases_stx$23.length == 0) {
        throw new Error('Must have at least one case');
    }
    var cases$33 = [];
    for (var i$34 = 0; i$34 < cases_stx$23.length; i$34 += 4) {
        var caseKwd$53 = cases_stx$23[i$34];
        var isInfix$54 = cases_stx$23[i$34 + 1].token.value === 'infix';
        if (isInfix$54) {
            i$34 += 1;
        }
        var casePattern$55 = cases_stx$23[i$34 + 1];
        var caseArrow$56 = cases_stx$23[i$34 + 2];
        var caseBody$57 = cases_stx$23[i$34 + 3];
        if (!(caseKwd$53 && caseKwd$53.token && caseKwd$53.token.value === 'case')) {
            throw new Error('expecting case keyword in syntax case');
        }
        if (!(casePattern$55 && casePattern$55.token && casePattern$55.token.value === '{}')) {
            throw new Error('expecting a pattern surrounded by {} in syntax case');
        }
        if (!(caseArrow$56 && caseArrow$56.token && caseArrow$56.token.value === '=>')) {
            throw new Error('expecting an arrow separating pattern from body in syntax case');
        }
        if (!(caseBody$57 && caseBody$57.token && caseBody$57.token.value === '{}')) {
            throw new Error('expecting a body surrounded by {} in syntax case');
        }
        if (isInfix$54) {
            var pattern$58 = cloneSyntax$32(casePattern$55).expose().token.inner;
            var lhs$59 = [];
            var rhs$60 = [];
            var separator$61 = null;
            for (var j$62 = 0; j$62 < pattern$58.length; j$62++) {
                if (separator$61) {
                    rhs$60.push(pattern$58[j$62]);
                } else {
                    if (pattern$58[j$62].token.type === parser.Token.Punctuator && pattern$58[j$62].token.value === '|') {
                        separator$61 = pattern$58[j$62];
                    } else {
                        lhs$59.push(pattern$58[j$62]);
                    }
                }
            }
            if (!separator$61) {
                throwSyntaxError('syntaxCase', 'Infix macros require a `|` separator', casePattern$55);
            }
            cases$33.push({
                lookbehind: loadPattern$26(lhs$59, true),
                pattern: loadPattern$26(rhs$60),
                body: caseBody$57.expose().token.inner
            });
        } else {
            cases$33.push({
                lookbehind: [],
                pattern: loadPattern$26(cloneSyntax$32(casePattern$55).expose().token.inner),
                body: caseBody$57.expose().token.inner
            });
        }
    }
    function patternsToObject$35(pats$63) {
        if (!pats$63.length) {
            return makeDelim('[]', [], here$21);
        }
        var freshId$64 = __fresh();
        context$17.patternMap.set(freshId$64, pats$63);
        return [
            makeIdent('getPattern', here$21),
            makeDelim('()', [makeValue(freshId$64, here$21)], here$21)
        ];
    }
    function makeMatch$36(caseObj$65) {
        var lhs$66 = makeAssign$31('lhs', patternsToObject$35(caseObj$65.lookbehind));
        var rhs$67 = makeAssign$31('rhs', patternsToObject$35(caseObj$65.pattern));
        var lhsMatch$68 = makeAssign$31('lhsMatch', [
                makeIdent('patternModule', here$21),
                makePunc('.', here$21),
                makeIdent('matchLookbehind', here$21),
                makeDelim('()', [
                    makeIdent('lhs', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('prevStx', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('prevTerms', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('context', name_stx$18)
                ], here$21)
            ]);
        var rhsMatch$69 = makeAssign$31('rhsMatch', [
                makeIdent('patternModule', here$21),
                makePunc('.', here$21),
                makeIdent('matchPatterns', here$21),
                makeDelim('()', [
                    makeIdent('rhs', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('arg', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('context', name_stx$18),
                    makePunc(',', here$21),
                    makeValue(true, here$21)
                ], here$21)
            ]);
        var mergeMatch$70 = makeAssign$31('match', [
                makeIdent('mergeMatches', here$21),
                makeDelim('()', [
                    makeIdent('rhsMatch', name_stx$18),
                    makePunc(',', here$21)
                ].concat(makeIdent('mergeMatches', here$21), makeDelim('()', [
                    makeIdent('lhsMatch', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('parentMatch', name_stx$18)
                ], here$21)), here$21)
            ]);
        return lhs$66.concat(lhsMatch$68, [
            makeKeyword('if', here$21),
            makeDelim('()', [
                makeIdent('lhsMatch', name_stx$18),
                makePunc('.', here$21),
                makeIdent('success', here$21)
            ], here$21),
            makeDelim('{}', rhs$67.concat(rhsMatch$69, [
                makeKeyword('if', here$21),
                makeDelim('()', [
                    makeIdent('rhsMatch', name_stx$18),
                    makePunc('.', here$21),
                    makeIdent('success', here$21)
                ], here$21),
                makeDelim('{}', mergeMatch$70.concat(makeTranscribe$37(caseObj$65)), here$21)
            ]), here$21)
        ]);
    }
    function makeTranscribe$37(caseObj$71) {
        var applyPreMark$72 = [
                makeIdent('applyMarkToPatternEnv', here$21),
                makeDelim('()', [
                    makeIdent('context', name_stx$18),
                    makePunc('.', here$21),
                    makeIdent('mark', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('match', name_stx$18),
                    makePunc('.', here$21),
                    makeIdent('patternEnv', name_stx$18)
                ], here$21),
                makePunc(';', here$21)
            ];
        var runBody$73 = makeVarDef$30('res', [
                makeDelim('()', makeFunc$29([], caseObj$71.body), here$21),
                makeDelim('()', [], here$21)
            ]);
        var errHandling$74 = [
                makeKeyword('if', here$21),
                makeDelim('()', [
                    makePunc('!', here$21),
                    makeIdent('Array', here$21),
                    makePunc('.', here$21),
                    makeIdent('isArray', here$21),
                    makeDelim('()', [makeIdent('res', name_stx$18)], here$21)
                ], here$21),
                makeDelim('{}', [
                    makeIdent('throwSyntaxError', here$21),
                    makeDelim('()', [
                        makeValue('macro', here$21),
                        makePunc(',', here$21),
                        makeValue('Macro must return a syntax array', here$21),
                        makePunc(',', here$21),
                        makeIdent('stx', name_stx$18)
                    ], here$21)
                ], here$21)
            ];
        var applyPostMark$75 = [
                makeIdent('res', name_stx$18),
                makePunc('=', here$21),
                makeIdent('res', name_stx$18),
                makePunc('.', here$21),
                makeIdent('map', here$21),
                makeDelim('()', makeFunc$29([makeIdent('stx', here$21)], [
                    makeKeyword('return', here$21),
                    makeIdent('stx', here$21),
                    makePunc('.', here$21),
                    makeIdent('mark', here$21),
                    makeDelim('()', [
                        makeIdent('context', name_stx$18),
                        makePunc('.', here$21),
                        makeIdent('mark', here$21)
                    ], here$21)
                ]), here$21),
                makePunc(';', here$21)
            ];
        var retResult$76 = [
                makeKeyword('return', here$21),
                makeDelim('{}', [
                    makeIdent('result', here$21),
                    makePunc(':', here$21),
                    makeIdent('res', name_stx$18),
                    makePunc(',', here$21),
                    makeIdent('rest', here$21),
                    makePunc(':', here$21),
                    makeIdent('match', name_stx$18),
                    makePunc('.', here$21),
                    makeIdent('rest', here$21),
                    makePunc(',', here$21),
                    makeIdent('prevStx', here$21),
                    makePunc(':', here$21),
                    makeIdent('lhsMatch', name_stx$18),
                    makePunc('.', here$21),
                    makeIdent('prevStx', here$21),
                    makePunc(',', here$21),
                    makeIdent('prevTerms', here$21),
                    makePunc(':', here$21),
                    makeIdent('lhsMatch', name_stx$18),
                    makePunc('.', here$21),
                    makeIdent('prevTerms', here$21)
                ], here$21)
            ];
        return applyPreMark$72.concat(runBody$73, errHandling$74, applyPostMark$75, retResult$76);
    }
    var arg_def$38 = makeVarDef$30('arg', [makeIdent('stx', name_stx$18)]);
    var name_def$39 = makeVarDef$30('name_stx', [
            makeIdent('arg', name_stx$18),
            makeDelim('[]', [makeValue(0, here$21)], here$21)
        ]);
    var match_defs$40 = [
            makeKeyword('var', here$21),
            makeIdent('lhs', name_stx$18),
            makePunc(',', here$21),
            makeIdent('lhsMatch', name_stx$18),
            makePunc(',', here$21),
            makeIdent('rhs', name_stx$18),
            makePunc(',', here$21),
            makeIdent('rhsMatch', name_stx$18),
            makePunc(',', here$21),
            makeIdent('match', name_stx$18),
            makePunc(',', here$21),
            makeIdent('res', name_stx$18),
            makePunc(';', here$21)
        ];
    var body$41 = arg_def$38.concat(name_def$39, match_defs$40);
    for (var i$34 = 0; i$34 < cases$33.length; i$34++) {
        body$41 = body$41.concat(makeMatch$36(cases$33[i$34]));
    }
    body$41 = body$41.concat(getTemplate(43));
    var res$44 = makeFunc$29([
            makeIdent('stx', name_stx$18),
            makePunc(',', here$21),
            makeIdent('context', name_stx$18),
            makePunc(',', here$21),
            makeIdent('prevStx', name_stx$18),
            makePunc(',', here$21),
            makeIdent('prevTerms', name_stx$18),
            makePunc(',', here$21),
            makeIdent('parentMatch', name_stx$18)
        ], body$41).concat([makeDelim('()', arg_stx$22.concat([
                makePunc(',', here$21),
                makeKeyword('typeof', here$21),
                makeIdent('match', name_stx$18),
                makePunc('!==', here$21),
                makeValue('undefined', here$21),
                makePunc('?', here$21),
                makeIdent('match', name_stx$18),
                makePunc(':', here$21),
                makeDelim('{}', [], here$21)
            ]), here$21)]);
    return {
        result: res$44,
        rest: stx$16.slice(3)
    };
}quoteSyntax=function (stx$0) {
    var name_stx$1 = stx$0[0];
    if (!(stx$0[1] && stx$0[1].token && stx$0[1].token.inner)) {
        throwSyntaxError('macro', 'Macro `quoteSyntax` could not be matched', stx$0[1]);
    }
    var res$2 = [
            makeIdent('#quoteSyntax', null),
            stx$0[1].expose()
        ];
    return {
        result: res$2,
        rest: stx$0.slice(2)
    };
}withSyntax_done=function (stx$111, context$112, prevStx$113, prevTerms$114) {
    return function (stx$117, context$118, prevStx$119, prevTerms$120, parentMatch$121) {
        var arg$122 = stx$117;
        var name_stx$123 = arg$122[0];
        var lhs$124, lhsMatch$125, rhs$126, rhsMatch$127, match$128, res$129;
        lhs$124 = [];
        lhsMatch$125 = patternModule.matchLookbehind(lhs$124, prevStx$119, prevTerms$120, context$118);
        if (lhsMatch$125.success) {
            rhs$126 = getPattern(116);
            rhsMatch$127 = patternModule.matchPatterns(rhs$126, arg$122, context$118, true);
            if (rhsMatch$127.success) {
                match$128 = mergeMatches(rhsMatch$127, mergeMatches(lhsMatch$125, parentMatch$121));
                applyMarkToPatternEnv(context$118.mark, match$128.patternEnv);
                var res$129 = function () {
                        var ctx$133 = patternModule.transcribe(getTemplate(132), name_stx$123, match$128.patternEnv);
                        var here$137 = patternModule.transcribe(getTemplate(136), name_stx$123, match$128.patternEnv);
                        var vars$141 = patternModule.transcribe(getTemplate(140), name_stx$123, match$128.patternEnv);
                        var rest$145 = patternModule.transcribe(getTemplate(144), name_stx$123, match$128.patternEnv);
                        var res$146 = [];
                        for (var i$147 = 0; i$147 < vars$141.length; i$147 += 3) {
                            var name$148 = vars$141[i$147];
                            var repeat$149 = !!vars$141[i$147 + 1].token.inner.length;
                            var rhs$150 = vars$141[i$147 + 2];
                            if (repeat$149) {
                                res$146.push(makeIdent('match', ctx$133), makePunc('.', here$137), makeIdent('patternEnv', here$137), makeDelim('[]', [makeValue(name$148.token.value, here$137)], here$137), makePunc('=', here$137), makeDelim('{}', [
                                    makeIdent('level', here$137),
                                    makePunc(':', here$137),
                                    makeValue(1, here$137),
                                    makePunc(',', here$137),
                                    makeIdent('match', here$137),
                                    makePunc(':', here$137),
                                    makeDelim('()', patternModule.transcribe(getTemplate(153), name_stx$123, match$128.patternEnv), here$137),
                                    makeDelim('()', [rhs$150], here$137)
                                ], here$137), makePunc(';', here$137));
                            } else {
                                res$146.push(makeIdent('match', ctx$133), makePunc('.', here$137), makeIdent('patternEnv', here$137), makeDelim('[]', [makeValue(name$148.token.value, here$137)], here$137), makePunc('=', here$137), makeDelim('{}', [
                                    makeIdent('level', here$137),
                                    makePunc(':', here$137),
                                    makeValue(0, here$137),
                                    makePunc(',', here$137),
                                    makeIdent('match', here$137),
                                    makePunc(':', here$137),
                                    rhs$150
                                ], here$137), makePunc(';', here$137));
                            }
                        }
                        res$146 = res$146.concat(rest$145);
                        res$146 = [
                            makeDelim('()', [
                                makeKeyword('function', here$137),
                                makeDelim('()', [makeIdent('match', ctx$133)], here$137),
                                makeDelim('{}', res$146, here$137)
                            ], here$137),
                            makeDelim('()', [
                                makeIdent('patternModule', here$137),
                                makePunc('.', here$137),
                                makeIdent('cloneMatch', here$137),
                                makeDelim('()', [makeIdent('match', ctx$133)], here$137)
                            ], here$137)
                        ];
                        return res$146;
                    }();
                if (!Array.isArray(res$129)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$117);
                }
                res$129 = res$129.map(function (stx$154) {
                    return stx$154.mark(context$118.mark);
                });
                return {
                    result: res$129,
                    rest: match$128.rest,
                    prevStx: lhsMatch$125.prevStx,
                    prevTerms: lhsMatch$125.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$111, context$112, prevStx$113, prevTerms$114, typeof match !== 'undefined' ? match : {});
}withSyntax_bind=function (stx$157, context$158, prevStx$159, prevTerms$160) {
    return function (stx$164, context$165, prevStx$166, prevTerms$167, parentMatch$168) {
        var arg$169 = stx$164;
        var name_stx$170 = arg$169[0];
        var lhs$171, lhsMatch$172, rhs$173, rhsMatch$174, match$175, res$176;
        lhs$171 = [];
        lhsMatch$172 = patternModule.matchLookbehind(lhs$171, prevStx$166, prevTerms$167, context$165);
        if (lhsMatch$172.success) {
            rhs$173 = getPattern(162);
            rhsMatch$174 = patternModule.matchPatterns(rhs$173, arg$169, context$165, true);
            if (rhsMatch$174.success) {
                match$175 = mergeMatches(rhsMatch$174, mergeMatches(lhsMatch$172, parentMatch$168));
                applyMarkToPatternEnv(context$165.mark, match$175.patternEnv);
                var res$176 = function () {
                        return patternModule.transcribe(getTemplate(178), name_stx$170, match$175.patternEnv);
                    }();
                if (!Array.isArray(res$176)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$164);
                }
                res$176 = res$176.map(function (stx$179) {
                    return stx$179.mark(context$165.mark);
                });
                return {
                    result: res$176,
                    rest: match$175.rest,
                    prevStx: lhsMatch$172.prevStx,
                    prevTerms: lhsMatch$172.prevTerms
                };
            }
        }
        lhs$171 = [];
        lhsMatch$172 = patternModule.matchLookbehind(lhs$171, prevStx$166, prevTerms$167, context$165);
        if (lhsMatch$172.success) {
            rhs$173 = getPattern(163);
            rhsMatch$174 = patternModule.matchPatterns(rhs$173, arg$169, context$165, true);
            if (rhsMatch$174.success) {
                match$175 = mergeMatches(rhsMatch$174, mergeMatches(lhsMatch$172, parentMatch$168));
                applyMarkToPatternEnv(context$165.mark, match$175.patternEnv);
                var res$176 = function () {
                        return patternModule.transcribe(getTemplate(181), name_stx$170, match$175.patternEnv);
                    }();
                if (!Array.isArray(res$176)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$164);
                }
                res$176 = res$176.map(function (stx$182) {
                    return stx$182.mark(context$165.mark);
                });
                return {
                    result: res$176,
                    rest: match$175.rest,
                    prevStx: lhsMatch$172.prevStx,
                    prevTerms: lhsMatch$172.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$157, context$158, prevStx$159, prevTerms$160, typeof match !== 'undefined' ? match : {});
}withSyntax=function (stx$185, context$186, prevStx$187, prevTerms$188) {
    return function (stx$192, context$193, prevStx$194, prevTerms$195, parentMatch$196) {
        var arg$197 = stx$192;
        var name_stx$198 = arg$197[0];
        var lhs$199, lhsMatch$200, rhs$201, rhsMatch$202, match$203, res$204;
        lhs$199 = [];
        lhsMatch$200 = patternModule.matchLookbehind(lhs$199, prevStx$194, prevTerms$195, context$193);
        if (lhsMatch$200.success) {
            rhs$201 = getPattern(190);
            rhsMatch$202 = patternModule.matchPatterns(rhs$201, arg$197, context$193, true);
            if (rhsMatch$202.success) {
                match$203 = mergeMatches(rhsMatch$202, mergeMatches(lhsMatch$200, parentMatch$196));
                applyMarkToPatternEnv(context$193.mark, match$203.patternEnv);
                var res$204 = function () {
                        return patternModule.transcribe(getTemplate(207), name_stx$198, match$203.patternEnv);
                    }();
                if (!Array.isArray(res$204)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$192);
                }
                res$204 = res$204.map(function (stx$208) {
                    return stx$208.mark(context$193.mark);
                });
                return {
                    result: res$204,
                    rest: match$203.rest,
                    prevStx: lhsMatch$200.prevStx,
                    prevTerms: lhsMatch$200.prevTerms
                };
            }
        }
        lhs$199 = [];
        lhsMatch$200 = patternModule.matchLookbehind(lhs$199, prevStx$194, prevTerms$195, context$193);
        if (lhsMatch$200.success) {
            rhs$201 = getPattern(191);
            rhsMatch$202 = patternModule.matchPatterns(rhs$201, arg$197, context$193, true);
            if (rhsMatch$202.success) {
                match$203 = mergeMatches(rhsMatch$202, mergeMatches(lhsMatch$200, parentMatch$196));
                applyMarkToPatternEnv(context$193.mark, match$203.patternEnv);
                var res$204 = function () {
                        return patternModule.transcribe(getTemplate(211), name_stx$198, match$203.patternEnv);
                    }();
                if (!Array.isArray(res$204)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$192);
                }
                res$204 = res$204.map(function (stx$212) {
                    return stx$212.mark(context$193.mark);
                });
                return {
                    result: res$204,
                    rest: match$203.rest,
                    prevStx: lhsMatch$200.prevStx,
                    prevTerms: lhsMatch$200.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$185, context$186, prevStx$187, prevTerms$188, typeof match !== 'undefined' ? match : {});
}letstx_bind=function (stx$215, context$216, prevStx$217, prevTerms$218) {
    return function (stx$226, context$227, prevStx$228, prevTerms$229, parentMatch$230) {
        var arg$231 = stx$226;
        var name_stx$232 = arg$231[0];
        var lhs$233, lhsMatch$234, rhs$235, rhsMatch$236, match$237, res$238;
        lhs$233 = [];
        lhsMatch$234 = patternModule.matchLookbehind(lhs$233, prevStx$228, prevTerms$229, context$227);
        if (lhsMatch$234.success) {
            rhs$235 = getPattern(220);
            rhsMatch$236 = patternModule.matchPatterns(rhs$235, arg$231, context$227, true);
            if (rhsMatch$236.success) {
                match$237 = mergeMatches(rhsMatch$236, mergeMatches(lhsMatch$234, parentMatch$230));
                applyMarkToPatternEnv(context$227.mark, match$237.patternEnv);
                var res$238 = function () {
                        return patternModule.transcribe(getTemplate(240), name_stx$232, match$237.patternEnv);
                    }();
                if (!Array.isArray(res$238)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$226);
                }
                res$238 = res$238.map(function (stx$241) {
                    return stx$241.mark(context$227.mark);
                });
                return {
                    result: res$238,
                    rest: match$237.rest,
                    prevStx: lhsMatch$234.prevStx,
                    prevTerms: lhsMatch$234.prevTerms
                };
            }
        }
        lhs$233 = [];
        lhsMatch$234 = patternModule.matchLookbehind(lhs$233, prevStx$228, prevTerms$229, context$227);
        if (lhsMatch$234.success) {
            rhs$235 = getPattern(221);
            rhsMatch$236 = patternModule.matchPatterns(rhs$235, arg$231, context$227, true);
            if (rhsMatch$236.success) {
                match$237 = mergeMatches(rhsMatch$236, mergeMatches(lhsMatch$234, parentMatch$230));
                applyMarkToPatternEnv(context$227.mark, match$237.patternEnv);
                var res$238 = function () {
                        return patternModule.transcribe(getTemplate(243), name_stx$232, match$237.patternEnv);
                    }();
                if (!Array.isArray(res$238)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$226);
                }
                res$238 = res$238.map(function (stx$244) {
                    return stx$244.mark(context$227.mark);
                });
                return {
                    result: res$238,
                    rest: match$237.rest,
                    prevStx: lhsMatch$234.prevStx,
                    prevTerms: lhsMatch$234.prevTerms
                };
            }
        }
        lhs$233 = [];
        lhsMatch$234 = patternModule.matchLookbehind(lhs$233, prevStx$228, prevTerms$229, context$227);
        if (lhsMatch$234.success) {
            rhs$235 = getPattern(222);
            rhsMatch$236 = patternModule.matchPatterns(rhs$235, arg$231, context$227, true);
            if (rhsMatch$236.success) {
                match$237 = mergeMatches(rhsMatch$236, mergeMatches(lhsMatch$234, parentMatch$230));
                applyMarkToPatternEnv(context$227.mark, match$237.patternEnv);
                var res$238 = function () {
                        return patternModule.transcribe(getTemplate(246), name_stx$232, match$237.patternEnv);
                    }();
                if (!Array.isArray(res$238)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$226);
                }
                res$238 = res$238.map(function (stx$247) {
                    return stx$247.mark(context$227.mark);
                });
                return {
                    result: res$238,
                    rest: match$237.rest,
                    prevStx: lhsMatch$234.prevStx,
                    prevTerms: lhsMatch$234.prevTerms
                };
            }
        }
        lhs$233 = [];
        lhsMatch$234 = patternModule.matchLookbehind(lhs$233, prevStx$228, prevTerms$229, context$227);
        if (lhsMatch$234.success) {
            rhs$235 = getPattern(223);
            rhsMatch$236 = patternModule.matchPatterns(rhs$235, arg$231, context$227, true);
            if (rhsMatch$236.success) {
                match$237 = mergeMatches(rhsMatch$236, mergeMatches(lhsMatch$234, parentMatch$230));
                applyMarkToPatternEnv(context$227.mark, match$237.patternEnv);
                var res$238 = function () {
                        return patternModule.transcribe(getTemplate(249), name_stx$232, match$237.patternEnv);
                    }();
                if (!Array.isArray(res$238)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$226);
                }
                res$238 = res$238.map(function (stx$250) {
                    return stx$250.mark(context$227.mark);
                });
                return {
                    result: res$238,
                    rest: match$237.rest,
                    prevStx: lhsMatch$234.prevStx,
                    prevTerms: lhsMatch$234.prevTerms
                };
            }
        }
        lhs$233 = [];
        lhsMatch$234 = patternModule.matchLookbehind(lhs$233, prevStx$228, prevTerms$229, context$227);
        if (lhsMatch$234.success) {
            rhs$235 = getPattern(224);
            rhsMatch$236 = patternModule.matchPatterns(rhs$235, arg$231, context$227, true);
            if (rhsMatch$236.success) {
                match$237 = mergeMatches(rhsMatch$236, mergeMatches(lhsMatch$234, parentMatch$230));
                applyMarkToPatternEnv(context$227.mark, match$237.patternEnv);
                var res$238 = function () {
                        return patternModule.transcribe(getTemplate(252), name_stx$232, match$237.patternEnv);
                    }();
                if (!Array.isArray(res$238)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$226);
                }
                res$238 = res$238.map(function (stx$253) {
                    return stx$253.mark(context$227.mark);
                });
                return {
                    result: res$238,
                    rest: match$237.rest,
                    prevStx: lhsMatch$234.prevStx,
                    prevTerms: lhsMatch$234.prevTerms
                };
            }
        }
        lhs$233 = [];
        lhsMatch$234 = patternModule.matchLookbehind(lhs$233, prevStx$228, prevTerms$229, context$227);
        if (lhsMatch$234.success) {
            rhs$235 = getPattern(225);
            rhsMatch$236 = patternModule.matchPatterns(rhs$235, arg$231, context$227, true);
            if (rhsMatch$236.success) {
                match$237 = mergeMatches(rhsMatch$236, mergeMatches(lhsMatch$234, parentMatch$230));
                applyMarkToPatternEnv(context$227.mark, match$237.patternEnv);
                var res$238 = function () {
                        return patternModule.transcribe(getTemplate(255), name_stx$232, match$237.patternEnv);
                    }();
                if (!Array.isArray(res$238)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$226);
                }
                res$238 = res$238.map(function (stx$256) {
                    return stx$256.mark(context$227.mark);
                });
                return {
                    result: res$238,
                    rest: match$237.rest,
                    prevStx: lhsMatch$234.prevStx,
                    prevTerms: lhsMatch$234.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$215, context$216, prevStx$217, prevTerms$218, typeof match !== 'undefined' ? match : {});
}letstx=function (stx$259, context$260, prevStx$261, prevTerms$262) {
    return function (stx$265, context$266, prevStx$267, prevTerms$268, parentMatch$269) {
        var arg$270 = stx$265;
        var name_stx$271 = arg$270[0];
        var lhs$272, lhsMatch$273, rhs$274, rhsMatch$275, match$276, res$277;
        lhs$272 = [];
        lhsMatch$273 = patternModule.matchLookbehind(lhs$272, prevStx$267, prevTerms$268, context$266);
        if (lhsMatch$273.success) {
            rhs$274 = getPattern(264);
            rhsMatch$275 = patternModule.matchPatterns(rhs$274, arg$270, context$266, true);
            if (rhsMatch$275.success) {
                match$276 = mergeMatches(rhsMatch$275, mergeMatches(lhsMatch$273, parentMatch$269));
                applyMarkToPatternEnv(context$266.mark, match$276.patternEnv);
                var res$277 = function () {
                        return patternModule.transcribe(getTemplate(280), name_stx$271, match$276.patternEnv);
                    }();
                if (!Array.isArray(res$277)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$265);
                }
                res$277 = res$277.map(function (stx$281) {
                    return stx$281.mark(context$266.mark);
                });
                return {
                    result: res$277,
                    rest: match$276.rest,
                    prevStx: lhsMatch$273.prevStx,
                    prevTerms: lhsMatch$273.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$259, context$260, prevStx$261, prevTerms$262, typeof match !== 'undefined' ? match : {});
}macro=function (stx$78) {
    var name_stx$79 = stx$78[0];
    var here$82 = getTemplate(81);
    var mac_name_stx$83;
    var body_inner_stx$84;
    var body_stx$85;
    var takeLine$86 = patternModule.takeLine;
    var makeIdentityRule$87 = patternModule.makeIdentityRule;
    var rest$88;
    if (stx$78[1] && stx$78[1].token.type === parser.Token.Delimiter && stx$78[1].token.value === '{}') {
        mac_name_stx$83 = null;
        body_stx$85 = stx$78[1];
        body_inner_stx$84 = stx$78[1].expose().token.inner;
        rest$88 = stx$78.slice(2);
    } else {
        mac_name_stx$83 = [];
        mac_name_stx$83.push(stx$78[1]);
        body_stx$85 = stx$78[2];
        body_inner_stx$84 = stx$78[2].expose().token.inner;
        rest$88 = stx$78.slice(3);
    }
    function makeFunc$89(params$94, body$95) {
        return [
            makeKeyword('function', here$82),
            makeDelim('()', params$94, here$82),
            makeDelim('{}', body$95, here$82)
        ];
    }
    function translateRule$90(pattern$96, def$97, isInfix$98) {
        var translatedPatt$99;
        if (isInfix$98) {
            translatedPatt$99 = [];
            for (var i$101 = 0, len$102 = pattern$96.length; i$101 < len$102; i$101++) {
                translatedPatt$99.push(pattern$96[i$101]);
                if (pattern$96[i$101].token.type === parser.Token.Punctuator && pattern$96[i$101].token.value === '|') {
                    translatedPatt$99.push(makeIdent('_', here$82));
                    translatedPatt$99 = translatedPatt$99.concat([
                        makeIdent('$', here$82),
                        makeDelim('()', pattern$96.slice(i$101 + 1), here$82)
                    ]);
                    break;
                }
            }
        } else {
            translatedPatt$99 = [
                makeIdent('_', here$82),
                makeIdent('$', here$82),
                makeDelim('()', pattern$96, here$82)
            ];
        }
        var translatedDef$100 = [
                makeKeyword('return', here$82),
                takeLine$86(here$82[0], makeIdent('syntax', name_stx$79)),
                makeDelim('{}', def$97, here$82)
            ];
        return [makeIdent('case', here$82)].concat(isInfix$98 ? makeIdent('infix', here$82) : [], makeDelim('{}', translatedPatt$99, here$82), makePunc('=>', here$82), makeDelim('{}', translatedDef$100, here$82));
    }
    if (body_inner_stx$84[0] && body_inner_stx$84[0].token.value === 'function') {
        if (mac_name_stx$83) {
            var res$93 = [makeIdent('macro', here$82)].concat(mac_name_stx$83).concat(body_stx$85);
            return {
                result: res$93,
                rest: rest$88
            };
        } else {
            var res$93 = [
                    makeIdent('macro', here$82),
                    body_stx$85
                ];
            return {
                result: res$93,
                rest: rest$88
            };
        }
    }
    var rules$91 = [];
    if (body_inner_stx$84[0] && body_inner_stx$84[0].token.value === 'rule') {
        for (var i$103 = 0; i$103 < body_inner_stx$84.length; i$103 += 4) {
            var isInfix$104 = body_inner_stx$84[i$103 + 1].token.value === 'infix';
            if (isInfix$104) {
                i$103 += 1;
            }
            var rule_pattern$105 = body_inner_stx$84[i$103 + 1];
            var rule_arrow$106 = body_inner_stx$84[i$103 + 2];
            var rule_def$107 = body_inner_stx$84[i$103 + 3];
            if (rule_pattern$105 && rule_arrow$106 && rule_arrow$106.token.value === '=>' && rule_def$107) {
                rules$91 = rules$91.concat(translateRule$90(rule_pattern$105.expose().token.inner, rule_def$107.expose().token.inner, isInfix$104));
            } else if (rule_pattern$105) {
                var idRule$108 = makeIdentityRule$87(rule_pattern$105.token.inner, isInfix$104, rule_pattern$105);
                rules$91 = rules$91.concat(translateRule$90(idRule$108.pattern, idRule$108.body, isInfix$104));
                i$103 -= 2;
            } else {
                throwSyntaxError('macro', 'Macro `macro` could not be matched', rule_arrow$106);
            }
        }
        rules$91 = makeDelim('{}', rules$91, here$82);
    } else {
        rules$91 = body_stx$85;
    }
    var stxSyntaxCase$92 = takeLine$86(here$82[0], makeIdent('syntaxCase', name_stx$79));
    var res$93 = mac_name_stx$83 ? [makeIdent('macro', here$82)].concat(mac_name_stx$83) : [makeIdent('macro', here$82)];
    res$93 = res$93.concat(makeDelim('{}', makeFunc$89([
        makeIdent('stx', name_stx$79),
        makePunc(',', here$82),
        makeIdent('context', name_stx$79),
        makePunc(',', here$82),
        makeIdent('prevStx', name_stx$79),
        makePunc(',', here$82),
        makeIdent('prevTerms', name_stx$79)
    ], [
        makeKeyword('return', here$82),
        stxSyntaxCase$92,
        makeDelim('()', [
            makeIdent('stx', name_stx$79),
            makePunc(',', here$82),
            makeIdent('context', name_stx$79),
            makePunc(',', here$82),
            makeIdent('prevStx', name_stx$79),
            makePunc(',', here$82),
            makeIdent('prevTerms', name_stx$79)
        ], here$82),
        rules$91
    ]), here$82));
    return {
        result: res$93,
        rest: rest$88
    };
}macroclass=function (stx$284, context$285, prevStx$286, prevTerms$287) {
    return function (stx$290, context$291, prevStx$292, prevTerms$293, parentMatch$294) {
        var arg$295 = stx$290;
        var name_stx$296 = arg$295[0];
        var lhs$297, lhsMatch$298, rhs$299, rhsMatch$300, match$301, res$302;
        lhs$297 = [];
        lhsMatch$298 = patternModule.matchLookbehind(lhs$297, prevStx$292, prevTerms$293, context$291);
        if (lhsMatch$298.success) {
            rhs$299 = getPattern(289);
            rhsMatch$300 = patternModule.matchPatterns(rhs$299, arg$295, context$291, true);
            if (rhsMatch$300.success) {
                match$301 = mergeMatches(rhsMatch$300, mergeMatches(lhsMatch$298, parentMatch$294));
                applyMarkToPatternEnv(context$291.mark, match$301.patternEnv);
                var res$302 = function () {
                        return patternModule.transcribe(getTemplate(304), name_stx$296, match$301.patternEnv);
                    }();
                if (!Array.isArray(res$302)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$290);
                }
                res$302 = res$302.map(function (stx$305) {
                    return stx$305.mark(context$291.mark);
                });
                return {
                    result: res$302,
                    rest: match$301.rest,
                    prevStx: lhsMatch$298.prevStx,
                    prevTerms: lhsMatch$298.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$284, context$285, prevStx$286, prevTerms$287, typeof match !== 'undefined' ? match : {});
}macroclass_modifier=function (stx$340, context$341, prevStx$342, prevTerms$343) {
    return function (stx$349, context$350, prevStx$351, prevTerms$352, parentMatch$353) {
        var arg$354 = stx$349;
        var name_stx$355 = arg$354[0];
        var lhs$356, lhsMatch$357, rhs$358, rhsMatch$359, match$360, res$361;
        lhs$356 = [];
        lhsMatch$357 = patternModule.matchLookbehind(lhs$356, prevStx$351, prevTerms$352, context$350);
        if (lhsMatch$357.success) {
            rhs$358 = getPattern(345);
            rhsMatch$359 = patternModule.matchPatterns(rhs$358, arg$354, context$350, true);
            if (rhsMatch$359.success) {
                match$360 = mergeMatches(rhsMatch$359, mergeMatches(lhsMatch$357, parentMatch$353));
                applyMarkToPatternEnv(context$350.mark, match$360.patternEnv);
                var res$361 = function () {
                        return patternModule.transcribe(getTemplate(363), name_stx$355, match$360.patternEnv);
                    }();
                if (!Array.isArray(res$361)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$349);
                }
                res$361 = res$361.map(function (stx$364) {
                    return stx$364.mark(context$350.mark);
                });
                return {
                    result: res$361,
                    rest: match$360.rest,
                    prevStx: lhsMatch$357.prevStx,
                    prevTerms: lhsMatch$357.prevTerms
                };
            }
        }
        lhs$356 = [];
        lhsMatch$357 = patternModule.matchLookbehind(lhs$356, prevStx$351, prevTerms$352, context$350);
        if (lhsMatch$357.success) {
            rhs$358 = getPattern(346);
            rhsMatch$359 = patternModule.matchPatterns(rhs$358, arg$354, context$350, true);
            if (rhsMatch$359.success) {
                match$360 = mergeMatches(rhsMatch$359, mergeMatches(lhsMatch$357, parentMatch$353));
                applyMarkToPatternEnv(context$350.mark, match$360.patternEnv);
                var res$361 = function () {
                        return patternModule.transcribe(getTemplate(366), name_stx$355, match$360.patternEnv);
                    }();
                if (!Array.isArray(res$361)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$349);
                }
                res$361 = res$361.map(function (stx$367) {
                    return stx$367.mark(context$350.mark);
                });
                return {
                    result: res$361,
                    rest: match$360.rest,
                    prevStx: lhsMatch$357.prevStx,
                    prevTerms: lhsMatch$357.prevTerms
                };
            }
        }
        lhs$356 = [];
        lhsMatch$357 = patternModule.matchLookbehind(lhs$356, prevStx$351, prevTerms$352, context$350);
        if (lhsMatch$357.success) {
            rhs$358 = getPattern(347);
            rhsMatch$359 = patternModule.matchPatterns(rhs$358, arg$354, context$350, true);
            if (rhsMatch$359.success) {
                match$360 = mergeMatches(rhsMatch$359, mergeMatches(lhsMatch$357, parentMatch$353));
                applyMarkToPatternEnv(context$350.mark, match$360.patternEnv);
                var res$361 = function () {
                        return patternModule.transcribe(getTemplate(369), name_stx$355, match$360.patternEnv);
                    }();
                if (!Array.isArray(res$361)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$349);
                }
                res$361 = res$361.map(function (stx$370) {
                    return stx$370.mark(context$350.mark);
                });
                return {
                    result: res$361,
                    rest: match$360.rest,
                    prevStx: lhsMatch$357.prevStx,
                    prevTerms: lhsMatch$357.prevTerms
                };
            }
        }
        lhs$356 = [];
        lhsMatch$357 = patternModule.matchLookbehind(lhs$356, prevStx$351, prevTerms$352, context$350);
        if (lhsMatch$357.success) {
            rhs$358 = getPattern(348);
            rhsMatch$359 = patternModule.matchPatterns(rhs$358, arg$354, context$350, true);
            if (rhsMatch$359.success) {
                match$360 = mergeMatches(rhsMatch$359, mergeMatches(lhsMatch$357, parentMatch$353));
                applyMarkToPatternEnv(context$350.mark, match$360.patternEnv);
                var res$361 = function () {
                        return patternModule.transcribe(getTemplate(372), name_stx$355, match$360.patternEnv);
                    }();
                if (!Array.isArray(res$361)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$349);
                }
                res$361 = res$361.map(function (stx$373) {
                    return stx$373.mark(context$350.mark);
                });
                return {
                    result: res$361,
                    rest: match$360.rest,
                    prevStx: lhsMatch$357.prevStx,
                    prevTerms: lhsMatch$357.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$340, context$341, prevStx$342, prevTerms$343, typeof match !== 'undefined' ? match : {});
}macroclass_create=function (stx$432, context$433, prevStx$434, prevTerms$435) {
    var here$438 = getTemplate(437);
    var macName$439 = stx$432[0];
    var nameStx$440 = stx$432[1];
    var stxName$441 = stx$432[2];
    var ctxName$442 = stx$432[3];
    var matchName$443 = stx$432[4];
    var decls$444 = stx$432[5].expose().token.inner;
    var mclass$445 = decls$444.reduce(function (m$448, decl$449) {
            var tag$450 = unwrapSyntax(decl$449.token.inner[0]);
            if (tag$450 === 'name') {
                if (m$448.name) {
                    throwSyntaxError('macroclass', 'Duplicate name declaration', decl$449.token.inner[0]);
                }
                m$448.name = unwrapSyntax(decl$449.token.inner[1]);
            } else if (tag$450 === 'pattern') {
                var patternStx$451 = decl$449.expose().token.inner.slice(1);
                var pattern$452 = patternStx$451.reduce(function (p$453, mod$454) {
                        var tag$455 = unwrapSyntax(mod$454.token.inner[0]);
                        if (tag$455 === 'name') {
                            if (p$453.name) {
                                throwSyntaxError('macroclass', 'Duplicate name declaration', mod$454.token.inner[0]);
                            }
                            p$453.name = unwrapSyntax(mod$454.token.inner[1]);
                        } else if (tag$455 === 'rule') {
                            if (p$453.rule) {
                                throwSyntaxError('macroclass', 'Duplicate rule declaration', mod$454.token.inner[0]);
                            }
                            p$453.rule = mod$454.expose().token.inner[1].expose().token.inner;
                        } else if (tag$455 === 'with') {
                            mod$454.expose();
                            p$453.withs.push({
                                lhs: mod$454.token.inner[1].expose().token.inner,
                                rhs: mod$454.token.inner[2].expose().token.inner.map(function mapper(s$456) {
                                    if (unwrapSyntax(s$456) === '#') {
                                        s$456.context = macName$439.context;
                                    } else if (s$456.token.type === parser.Token.Delimiter) {
                                        s$456.expose();
                                        s$456.token.inner = s$456.token.inner.map(mapper);
                                    }
                                    return s$456;
                                })
                            });
                        }
                        return p$453;
                    }, { withs: [] });
                m$448.patterns.push(pattern$452);
            }
            return m$448;
        }, { patterns: [] });
    var body$446 = mclass$445.patterns.reduce(function (stx$457, pattern$458) {
            var ruleStx$459 = [makeIdent('_', here$438)].concat(pattern$458.rule);
            var ruleId$460 = __fresh();
            var rule$461 = patternModule.loadPattern(ruleStx$459);
            context$433.patternMap.set(ruleId$460, rule$461);
            var withBindings$462 = pattern$458.withs.reduce(function (acc$466, w$467) {
                    return acc$466.concat(w$467.lhs.concat(makePunc('=', here$438), w$467.rhs, makePunc(',', here$438)));
                }, []);
            var ret$463 = [
                    makeKeyword('return', here$438),
                    makeDelim('{}', [
                        makeIdent('result', here$438),
                        makePunc(':', here$438),
                        makeDelim('[]', [], here$438),
                        makePunc(',', here$438),
                        makeIdent('rest', here$438),
                        makePunc(':', here$438),
                        matchName$443,
                        makePunc('.', here$438),
                        makeIdent('rest', here$438),
                        makePunc(',', here$438),
                        makeIdent('patterns', here$438),
                        makePunc(':', here$438),
                        matchName$443,
                        makePunc('.', here$438),
                        makeIdent('patternEnv', here$438)
                    ], here$438)
                ];
            var inner$464 = ret$463;
            if (withBindings$462.length) {
                inner$464 = [
                    makeKeyword('return', macName$439),
                    makeIdent('withSyntax', macName$439),
                    makeDelim('()', withBindings$462, here$438),
                    makeDelim('{}', ret$463, here$438)
                ];
            }
            var res$465 = [
                    matchName$443,
                    makePunc('=', here$438),
                    makeIdent('patternModule', here$438),
                    makePunc('.', here$438),
                    makeIdent('matchPatterns', here$438),
                    makeDelim('()', [
                        makeIdent('getPattern', here$438),
                        makeDelim('()', [makeValue(ruleId$460, here$438)], here$438),
                        makePunc(',', here$438),
                        stxName$441,
                        makePunc(',', here$438),
                        ctxName$442,
                        makePunc(',', here$438),
                        makeValue(true, here$438)
                    ], here$438),
                    makePunc(';', here$438),
                    makeKeyword('if', here$438),
                    makeDelim('()', [
                        matchName$443,
                        makePunc('.', here$438),
                        makeIdent('success', here$438)
                    ], here$438),
                    makeDelim('{}', inner$464, here$438)
                ];
            return stx$457.concat(res$465);
        }, []);
    var res$447 = body$446.concat(makeIdent('throwSyntaxCaseError', here$438), makeDelim('()', [
            makeValue(mclass$445.name || unwrapSyntax(nameStx$440), here$438),
            makePunc(',', here$438),
            makeValue('No match', here$438)
        ], here$438));
    return {
        result: res$447,
        rest: stx$432.slice(6)
    };
}op_assoc=function (stx$498, context$499, prevStx$500, prevTerms$501) {
    return function (stx$505, context$506, prevStx$507, prevTerms$508, parentMatch$509) {
        var arg$510 = stx$505;
        var name_stx$511 = arg$510[0];
        var lhs$512, lhsMatch$513, rhs$514, rhsMatch$515, match$516, res$517;
        lhs$512 = [];
        lhsMatch$513 = patternModule.matchLookbehind(lhs$512, prevStx$507, prevTerms$508, context$506);
        if (lhsMatch$513.success) {
            rhs$514 = getPattern(503);
            rhsMatch$515 = patternModule.matchPatterns(rhs$514, arg$510, context$506, true);
            if (rhsMatch$515.success) {
                match$516 = mergeMatches(rhsMatch$515, mergeMatches(lhsMatch$513, parentMatch$509));
                applyMarkToPatternEnv(context$506.mark, match$516.patternEnv);
                var res$517 = function () {
                        return patternModule.transcribe(getTemplate(519), name_stx$511, match$516.patternEnv);
                    }();
                if (!Array.isArray(res$517)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$505);
                }
                res$517 = res$517.map(function (stx$520) {
                    return stx$520.mark(context$506.mark);
                });
                return {
                    result: res$517,
                    rest: match$516.rest,
                    prevStx: lhsMatch$513.prevStx,
                    prevTerms: lhsMatch$513.prevTerms
                };
            }
        }
        lhs$512 = [];
        lhsMatch$513 = patternModule.matchLookbehind(lhs$512, prevStx$507, prevTerms$508, context$506);
        if (lhsMatch$513.success) {
            rhs$514 = getPattern(504);
            rhsMatch$515 = patternModule.matchPatterns(rhs$514, arg$510, context$506, true);
            if (rhsMatch$515.success) {
                match$516 = mergeMatches(rhsMatch$515, mergeMatches(lhsMatch$513, parentMatch$509));
                applyMarkToPatternEnv(context$506.mark, match$516.patternEnv);
                var res$517 = function () {
                        return patternModule.transcribe(getTemplate(522), name_stx$511, match$516.patternEnv);
                    }();
                if (!Array.isArray(res$517)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$505);
                }
                res$517 = res$517.map(function (stx$523) {
                    return stx$523.mark(context$506.mark);
                });
                return {
                    result: res$517,
                    rest: match$516.rest,
                    prevStx: lhsMatch$513.prevStx,
                    prevTerms: lhsMatch$513.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$498, context$499, prevStx$500, prevTerms$501, typeof match !== 'undefined' ? match : {});
}macroclass_decl=function (stx$308, context$309, prevStx$310, prevTerms$311) {
    return function (stx$316, context$317, prevStx$318, prevTerms$319, parentMatch$320) {
        var arg$321 = stx$316;
        var name_stx$322 = arg$321[0];
        var lhs$323, lhsMatch$324, rhs$325, rhsMatch$326, match$327, res$328;
        lhs$323 = [];
        lhsMatch$324 = patternModule.matchLookbehind(lhs$323, prevStx$318, prevTerms$319, context$317);
        if (lhsMatch$324.success) {
            rhs$325 = getPattern(313);
            rhsMatch$326 = patternModule.matchPatterns(rhs$325, arg$321, context$317, true);
            if (rhsMatch$326.success) {
                match$327 = mergeMatches(rhsMatch$326, mergeMatches(lhsMatch$324, parentMatch$320));
                applyMarkToPatternEnv(context$317.mark, match$327.patternEnv);
                var res$328 = function () {
                        return patternModule.transcribe(getTemplate(330), name_stx$322, match$327.patternEnv);
                    }();
                if (!Array.isArray(res$328)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$316);
                }
                res$328 = res$328.map(function (stx$331) {
                    return stx$331.mark(context$317.mark);
                });
                return {
                    result: res$328,
                    rest: match$327.rest,
                    prevStx: lhsMatch$324.prevStx,
                    prevTerms: lhsMatch$324.prevTerms
                };
            }
        }
        lhs$323 = [];
        lhsMatch$324 = patternModule.matchLookbehind(lhs$323, prevStx$318, prevTerms$319, context$317);
        if (lhsMatch$324.success) {
            rhs$325 = getPattern(314);
            rhsMatch$326 = patternModule.matchPatterns(rhs$325, arg$321, context$317, true);
            if (rhsMatch$326.success) {
                match$327 = mergeMatches(rhsMatch$326, mergeMatches(lhsMatch$324, parentMatch$320));
                applyMarkToPatternEnv(context$317.mark, match$327.patternEnv);
                var res$328 = function () {
                        return patternModule.transcribe(getTemplate(333), name_stx$322, match$327.patternEnv);
                    }();
                if (!Array.isArray(res$328)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$316);
                }
                res$328 = res$328.map(function (stx$334) {
                    return stx$334.mark(context$317.mark);
                });
                return {
                    result: res$328,
                    rest: match$327.rest,
                    prevStx: lhsMatch$324.prevStx,
                    prevTerms: lhsMatch$324.prevTerms
                };
            }
        }
        lhs$323 = [];
        lhsMatch$324 = patternModule.matchLookbehind(lhs$323, prevStx$318, prevTerms$319, context$317);
        if (lhsMatch$324.success) {
            rhs$325 = getPattern(315);
            rhsMatch$326 = patternModule.matchPatterns(rhs$325, arg$321, context$317, true);
            if (rhsMatch$326.success) {
                match$327 = mergeMatches(rhsMatch$326, mergeMatches(lhsMatch$324, parentMatch$320));
                applyMarkToPatternEnv(context$317.mark, match$327.patternEnv);
                var res$328 = function () {
                        return patternModule.transcribe(getTemplate(336), name_stx$322, match$327.patternEnv);
                    }();
                if (!Array.isArray(res$328)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$316);
                }
                res$328 = res$328.map(function (stx$337) {
                    return stx$337.mark(context$317.mark);
                });
                return {
                    result: res$328,
                    rest: match$327.rest,
                    prevStx: lhsMatch$324.prevStx,
                    prevTerms: lhsMatch$324.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$308, context$309, prevStx$310, prevTerms$311, typeof match !== 'undefined' ? match : {});
}macroclass_with_lhs=function (stx$376, context$377, prevStx$378, prevTerms$379) {
    return function (stx$383, context$384, prevStx$385, prevTerms$386, parentMatch$387) {
        var arg$388 = stx$383;
        var name_stx$389 = arg$388[0];
        var lhs$390, lhsMatch$391, rhs$392, rhsMatch$393, match$394, res$395;
        lhs$390 = [];
        lhsMatch$391 = patternModule.matchLookbehind(lhs$390, prevStx$385, prevTerms$386, context$384);
        if (lhsMatch$391.success) {
            rhs$392 = getPattern(381);
            rhsMatch$393 = patternModule.matchPatterns(rhs$392, arg$388, context$384, true);
            if (rhsMatch$393.success) {
                match$394 = mergeMatches(rhsMatch$393, mergeMatches(lhsMatch$391, parentMatch$387));
                applyMarkToPatternEnv(context$384.mark, match$394.patternEnv);
                var res$395 = function () {
                        return patternModule.transcribe(getTemplate(397), name_stx$389, match$394.patternEnv);
                    }();
                if (!Array.isArray(res$395)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$383);
                }
                res$395 = res$395.map(function (stx$398) {
                    return stx$398.mark(context$384.mark);
                });
                return {
                    result: res$395,
                    rest: match$394.rest,
                    prevStx: lhsMatch$391.prevStx,
                    prevTerms: lhsMatch$391.prevTerms
                };
            }
        }
        lhs$390 = [];
        lhsMatch$391 = patternModule.matchLookbehind(lhs$390, prevStx$385, prevTerms$386, context$384);
        if (lhsMatch$391.success) {
            rhs$392 = getPattern(382);
            rhsMatch$393 = patternModule.matchPatterns(rhs$392, arg$388, context$384, true);
            if (rhsMatch$393.success) {
                match$394 = mergeMatches(rhsMatch$393, mergeMatches(lhsMatch$391, parentMatch$387));
                applyMarkToPatternEnv(context$384.mark, match$394.patternEnv);
                var res$395 = function () {
                        return patternModule.transcribe(getTemplate(400), name_stx$389, match$394.patternEnv);
                    }();
                if (!Array.isArray(res$395)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$383);
                }
                res$395 = res$395.map(function (stx$401) {
                    return stx$401.mark(context$384.mark);
                });
                return {
                    result: res$395,
                    rest: match$394.rest,
                    prevStx: lhsMatch$391.prevStx,
                    prevTerms: lhsMatch$391.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$376, context$377, prevStx$378, prevTerms$379, typeof match !== 'undefined' ? match : {});
}op_name=function (stx$526, context$527, prevStx$528, prevTerms$529) {
    return function (stx$533, context$534, prevStx$535, prevTerms$536, parentMatch$537) {
        var arg$538 = stx$533;
        var name_stx$539 = arg$538[0];
        var lhs$540, lhsMatch$541, rhs$542, rhsMatch$543, match$544, res$545;
        lhs$540 = [];
        lhsMatch$541 = patternModule.matchLookbehind(lhs$540, prevStx$535, prevTerms$536, context$534);
        if (lhsMatch$541.success) {
            rhs$542 = getPattern(531);
            rhsMatch$543 = patternModule.matchPatterns(rhs$542, arg$538, context$534, true);
            if (rhsMatch$543.success) {
                match$544 = mergeMatches(rhsMatch$543, mergeMatches(lhsMatch$541, parentMatch$537));
                applyMarkToPatternEnv(context$534.mark, match$544.patternEnv);
                var res$545 = function () {
                        return patternModule.transcribe(getTemplate(547), name_stx$539, match$544.patternEnv);
                    }();
                if (!Array.isArray(res$545)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$533);
                }
                res$545 = res$545.map(function (stx$548) {
                    return stx$548.mark(context$534.mark);
                });
                return {
                    result: res$545,
                    rest: match$544.rest,
                    prevStx: lhsMatch$541.prevStx,
                    prevTerms: lhsMatch$541.prevTerms
                };
            }
        }
        lhs$540 = [];
        lhsMatch$541 = patternModule.matchLookbehind(lhs$540, prevStx$535, prevTerms$536, context$534);
        if (lhsMatch$541.success) {
            rhs$542 = getPattern(532);
            rhsMatch$543 = patternModule.matchPatterns(rhs$542, arg$538, context$534, true);
            if (rhsMatch$543.success) {
                match$544 = mergeMatches(rhsMatch$543, mergeMatches(lhsMatch$541, parentMatch$537));
                applyMarkToPatternEnv(context$534.mark, match$544.patternEnv);
                var res$545 = function () {
                        return patternModule.transcribe(getTemplate(550), name_stx$539, match$544.patternEnv);
                    }();
                if (!Array.isArray(res$545)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$533);
                }
                res$545 = res$545.map(function (stx$551) {
                    return stx$551.mark(context$534.mark);
                });
                return {
                    result: res$545,
                    rest: match$544.rest,
                    prevStx: lhsMatch$541.prevStx,
                    prevTerms: lhsMatch$541.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$526, context$527, prevStx$528, prevTerms$529, typeof match !== 'undefined' ? match : {});
}safemacro=function (stx$470, context$471, prevStx$472, prevTerms$473) {
    return function (stx$477, context$478, prevStx$479, prevTerms$480, parentMatch$481) {
        var arg$482 = stx$477;
        var name_stx$483 = arg$482[0];
        var lhs$484, lhsMatch$485, rhs$486, rhsMatch$487, match$488, res$489;
        lhs$484 = [];
        lhsMatch$485 = patternModule.matchLookbehind(lhs$484, prevStx$479, prevTerms$480, context$478);
        if (lhsMatch$485.success) {
            rhs$486 = getPattern(475);
            rhsMatch$487 = patternModule.matchPatterns(rhs$486, arg$482, context$478, true);
            if (rhsMatch$487.success) {
                match$488 = mergeMatches(rhsMatch$487, mergeMatches(lhsMatch$485, parentMatch$481));
                applyMarkToPatternEnv(context$478.mark, match$488.patternEnv);
                var res$489 = function () {
                        return patternModule.transcribe(getTemplate(491), name_stx$483, match$488.patternEnv);
                    }();
                if (!Array.isArray(res$489)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$477);
                }
                res$489 = res$489.map(function (stx$492) {
                    return stx$492.mark(context$478.mark);
                });
                return {
                    result: res$489,
                    rest: match$488.rest,
                    prevStx: lhsMatch$485.prevStx,
                    prevTerms: lhsMatch$485.prevTerms
                };
            }
        }
        lhs$484 = [];
        lhsMatch$485 = patternModule.matchLookbehind(lhs$484, prevStx$479, prevTerms$480, context$478);
        if (lhsMatch$485.success) {
            rhs$486 = getPattern(476);
            rhsMatch$487 = patternModule.matchPatterns(rhs$486, arg$482, context$478, true);
            if (rhsMatch$487.success) {
                match$488 = mergeMatches(rhsMatch$487, mergeMatches(lhsMatch$485, parentMatch$481));
                applyMarkToPatternEnv(context$478.mark, match$488.patternEnv);
                var res$489 = function () {
                        return patternModule.transcribe(getTemplate(494), name_stx$483, match$488.patternEnv);
                    }();
                if (!Array.isArray(res$489)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$477);
                }
                res$489 = res$489.map(function (stx$495) {
                    return stx$495.mark(context$478.mark);
                });
                return {
                    result: res$489,
                    rest: match$488.rest,
                    prevStx: lhsMatch$485.prevStx,
                    prevTerms: lhsMatch$485.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$470, context$471, prevStx$472, prevTerms$473, typeof match !== 'undefined' ? match : {});
}macroclass_with_rhs=function (stx$404, context$405, prevStx$406, prevTerms$407) {
    return function (stx$411, context$412, prevStx$413, prevTerms$414, parentMatch$415) {
        var arg$416 = stx$411;
        var name_stx$417 = arg$416[0];
        var lhs$418, lhsMatch$419, rhs$420, rhsMatch$421, match$422, res$423;
        lhs$418 = [];
        lhsMatch$419 = patternModule.matchLookbehind(lhs$418, prevStx$413, prevTerms$414, context$412);
        if (lhsMatch$419.success) {
            rhs$420 = getPattern(409);
            rhsMatch$421 = patternModule.matchPatterns(rhs$420, arg$416, context$412, true);
            if (rhsMatch$421.success) {
                match$422 = mergeMatches(rhsMatch$421, mergeMatches(lhsMatch$419, parentMatch$415));
                applyMarkToPatternEnv(context$412.mark, match$422.patternEnv);
                var res$423 = function () {
                        return patternModule.transcribe(getTemplate(425), name_stx$417, match$422.patternEnv);
                    }();
                if (!Array.isArray(res$423)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$411);
                }
                res$423 = res$423.map(function (stx$426) {
                    return stx$426.mark(context$412.mark);
                });
                return {
                    result: res$423,
                    rest: match$422.rest,
                    prevStx: lhsMatch$419.prevStx,
                    prevTerms: lhsMatch$419.prevTerms
                };
            }
        }
        lhs$418 = [];
        lhsMatch$419 = patternModule.matchLookbehind(lhs$418, prevStx$413, prevTerms$414, context$412);
        if (lhsMatch$419.success) {
            rhs$420 = getPattern(410);
            rhsMatch$421 = patternModule.matchPatterns(rhs$420, arg$416, context$412, true);
            if (rhsMatch$421.success) {
                match$422 = mergeMatches(rhsMatch$421, mergeMatches(lhsMatch$419, parentMatch$415));
                applyMarkToPatternEnv(context$412.mark, match$422.patternEnv);
                var res$423 = function () {
                        return patternModule.transcribe(getTemplate(428), name_stx$417, match$422.patternEnv);
                    }();
                if (!Array.isArray(res$423)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$411);
                }
                res$423 = res$423.map(function (stx$429) {
                    return stx$429.mark(context$412.mark);
                });
                return {
                    result: res$423,
                    rest: match$422.rest,
                    prevStx: lhsMatch$419.prevStx,
                    prevTerms: lhsMatch$419.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$404, context$405, prevStx$406, prevTerms$407, typeof match !== 'undefined' ? match : {});
}operator=function (stx$555, context$556, prevStx$557, prevTerms$558) {
    return function (stx$565, context$566, prevStx$567, prevTerms$568, parentMatch$569) {
        var arg$570 = stx$565;
        var name_stx$571 = arg$570[0];
        var lhs$572, lhsMatch$573, rhs$574, rhsMatch$575, match$576, res$577;
        lhs$572 = [];
        lhsMatch$573 = patternModule.matchLookbehind(lhs$572, prevStx$567, prevTerms$568, context$566);
        if (lhsMatch$573.success) {
            rhs$574 = getPattern(560);
            rhsMatch$575 = patternModule.matchPatterns(rhs$574, arg$570, context$566, true);
            if (rhsMatch$575.success) {
                match$576 = mergeMatches(rhsMatch$575, mergeMatches(lhsMatch$573, parentMatch$569));
                applyMarkToPatternEnv(context$566.mark, match$576.patternEnv);
                var res$577 = function () {
                        return patternModule.transcribe(getTemplate(579), name_stx$571, match$576.patternEnv);
                    }();
                if (!Array.isArray(res$577)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$565);
                }
                res$577 = res$577.map(function (stx$580) {
                    return stx$580.mark(context$566.mark);
                });
                return {
                    result: res$577,
                    rest: match$576.rest,
                    prevStx: lhsMatch$573.prevStx,
                    prevTerms: lhsMatch$573.prevTerms
                };
            }
        }
        lhs$572 = getPattern(561);
        lhsMatch$573 = patternModule.matchLookbehind(lhs$572, prevStx$567, prevTerms$568, context$566);
        if (lhsMatch$573.success) {
            rhs$574 = getPattern(562);
            rhsMatch$575 = patternModule.matchPatterns(rhs$574, arg$570, context$566, true);
            if (rhsMatch$575.success) {
                match$576 = mergeMatches(rhsMatch$575, mergeMatches(lhsMatch$573, parentMatch$569));
                applyMarkToPatternEnv(context$566.mark, match$576.patternEnv);
                var res$577 = function () {
                        return patternModule.transcribe(getTemplate(582), name_stx$571, match$576.patternEnv);
                    }();
                if (!Array.isArray(res$577)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$565);
                }
                res$577 = res$577.map(function (stx$583) {
                    return stx$583.mark(context$566.mark);
                });
                return {
                    result: res$577,
                    rest: match$576.rest,
                    prevStx: lhsMatch$573.prevStx,
                    prevTerms: lhsMatch$573.prevTerms
                };
            }
        }
        lhs$572 = [];
        lhsMatch$573 = patternModule.matchLookbehind(lhs$572, prevStx$567, prevTerms$568, context$566);
        if (lhsMatch$573.success) {
            rhs$574 = getPattern(563);
            rhsMatch$575 = patternModule.matchPatterns(rhs$574, arg$570, context$566, true);
            if (rhsMatch$575.success) {
                match$576 = mergeMatches(rhsMatch$575, mergeMatches(lhsMatch$573, parentMatch$569));
                applyMarkToPatternEnv(context$566.mark, match$576.patternEnv);
                var res$577 = function () {
                        return patternModule.transcribe(getTemplate(585), name_stx$571, match$576.patternEnv);
                    }();
                if (!Array.isArray(res$577)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$565);
                }
                res$577 = res$577.map(function (stx$586) {
                    return stx$586.mark(context$566.mark);
                });
                return {
                    result: res$577,
                    rest: match$576.rest,
                    prevStx: lhsMatch$573.prevStx,
                    prevTerms: lhsMatch$573.prevTerms
                };
            }
        }
        lhs$572 = [];
        lhsMatch$573 = patternModule.matchLookbehind(lhs$572, prevStx$567, prevTerms$568, context$566);
        if (lhsMatch$573.success) {
            rhs$574 = getPattern(564);
            rhsMatch$575 = patternModule.matchPatterns(rhs$574, arg$570, context$566, true);
            if (rhsMatch$575.success) {
                match$576 = mergeMatches(rhsMatch$575, mergeMatches(lhsMatch$573, parentMatch$569));
                applyMarkToPatternEnv(context$566.mark, match$576.patternEnv);
                var res$577 = function () {
                        return patternModule.transcribe(getTemplate(588), name_stx$571, match$576.patternEnv);
                    }();
                if (!Array.isArray(res$577)) {
                    throwSyntaxError('macro', 'Macro must return a syntax array', stx$565);
                }
                res$577 = res$577.map(function (stx$589) {
                    return stx$589.mark(context$566.mark);
                });
                return {
                    result: res$577,
                    rest: match$576.rest,
                    prevStx: lhsMatch$573.prevStx,
                    prevTerms: lhsMatch$573.prevTerms
                };
            }
        }
        throwSyntaxCaseError('Could not match any cases');
    }(stx$555, context$556, prevStx$557, prevTerms$558, typeof match$488 !== 'undefined' ? match$488 : {});
}